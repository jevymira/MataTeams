// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Teams.Infrastructure;

#nullable disable

namespace Teams.Infrastructure.Migrations
{
    [DbContext(typeof(TeamDbContext))]
    [Migration("20251026192549_DropProficiency")]
    partial class DropProficiency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectRoleSkill", b =>
                {
                    b.Property<Guid>("ProjectRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_role_id");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid")
                        .HasColumnName("skills_id");

                    b.HasKey("ProjectRoleId", "SkillsId")
                        .HasName("pk_project_role_skill");

                    b.HasIndex("SkillsId")
                        .HasDatabaseName("ix_project_role_skill_skills_id");

                    b.ToTable("project_role_skill", (string)null);
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid")
                        .HasColumnName("skills_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SkillsId", "UserId")
                        .HasName("pk_skill_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_skill_user_user_id");

                    b.ToTable("skill_user", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_projects_owner_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("PositionCount")
                        .HasColumnType("integer")
                        .HasColumnName("position_count");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_project_roles");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_roles_project_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_roles_role_id");

                    b.ToTable("project_roles", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("leader_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("LeaderId")
                        .HasDatabaseName("ix_teams_leader_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_teams_project_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProjectRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_role_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_team_members");

                    b.HasIndex("ProjectRoleId")
                        .HasDatabaseName("ix_team_members_project_role_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_members_team_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_members_user_id");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.TeamMembershipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProjectRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_role_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_team_membership_requests");

                    b.HasIndex("ProjectRoleId")
                        .HasDatabaseName("ix_team_membership_requests_project_role_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_membership_requests_team_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_membership_requests_user_id");

                    b.ToTable("team_membership_requests", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_guid");

                    b.Property<bool>("IsFacultyOrStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_faculty_or_staff");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.SharedKernel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.SharedKernel.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("ProjectRoleSkill", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", null)
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_skill_project_roles_project_role_id");

                    b.HasOne("Teams.Domain.SharedKernel.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_skill_skills_skills_id");
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.HasOne("Teams.Domain.SharedKernel.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skill_user_skills_skills_id");

                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skill_user_users_user_id");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_projects_users_owner_id");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.Project", null)
                        .WithMany("Roles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_roles_projects_project_id");

                    b.HasOne("Teams.Domain.SharedKernel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_roles_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Team", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_users_leader_id");

                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.Project", null)
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_projects_project_id");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.TeamMember", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", null)
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_project_roles_project_role_id");

                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_teams_team_id");

                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_users_user_id");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.TeamMembershipRequest", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", null)
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_membership_requests_project_roles_project_role_id");

                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.Team", null)
                        .WithMany("MembershipRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_membership_requests_teams_team_id");

                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_membership_requests_users_user_id");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("MembershipRequests");
                });
#pragma warning restore 612, 618
        }
    }
}

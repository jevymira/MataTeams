// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Teams.Infrastructure;

#nullable disable

namespace Teams.Infrastructure.Migrations
{
    [DbContext(typeof(TeamDbContext))]
    [Migration("20251008210225_ReAddUserIdColumnToTeamMember")]
    partial class ReAddUserIdColumnToTeamMember
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("PositionCount")
                        .HasColumnType("integer")
                        .HasColumnName("position_count");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.ToTable("project_roles", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRoleSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Proficiency")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency");

                    b.Property<Guid>("ProjectRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_role_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRoleId");

                    b.HasIndex("SkillId");

                    b.ToTable("project_role_skills", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.TeamAggregate.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.TeamAggregate.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_guid");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.UserAggregate.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Proficiency")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("user_skills", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.SharedKernel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.SharedKernel.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.Project", null)
                        .WithMany("Roles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teams.Domain.SharedKernel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRoleSkill", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", null)
                        .WithMany("Skills")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teams.Domain.SharedKernel.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.TeamAggregate.TeamMember", b =>
                {
                    b.HasOne("Teams.Domain.Aggregates.TeamAggregate.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.UserAggregate.UserSkill", b =>
                {
                    b.HasOne("Teams.Domain.SharedKernel.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teams.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.Project", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.ProjectAggregate.ProjectRole", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Teams.Domain.Aggregates.TeamAggregate.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
